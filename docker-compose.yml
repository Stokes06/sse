version: '3'
services:
  postgresql:
    image: "postgres" # use latest official postgres version
    environment:
      POSTGRES_USER: sse_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sse_database
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
    ports:
      - "5432:5432"
    restart: unless-stopped
  mercure:
    image: dunglas/mercure
    command: caddy run -config /etc/caddy/Caddyfile.dev # Enable demo mode
    environment:
      # You should definitely change all these values in production
      - MERCURE_PUBLISHER_JWT_KEY=!ChangeMe! # You have to change MERCURE_JWT_TOKEN in api/.env when you change this. You can put the old value of MERCURE_JWT_TOKEN into the debugger on https://jwt.io/ and put the new value of JWT_KEY in the "secret" field to obtain the new encoded value for MERCURE_JWT_TOKEN
      - MERCURE_SUBSCRIBER_JWT_KEY=!ChangeMe! # You have to change MERCURE_JWT_TOKEN in api/.env when you change this. You can put the old value of MERCURE_JWT_TOKEN into the debugger on https://jwt.io/ and put the new value of JWT_KEY in the "secret" field to obtain the new encoded value for MERCURE_JWT_TOKEN
      - ALLOW_ANONYMOUS=1
      - DEBUG=debug # Enable the debug mode. You should not enable it in production!
      - SERVER_NAME=:80 # Allow Mercure to run in HTTP, for PHP container to call it. Should not be set in production!
      - MERCURE_EXTRA_DIRECTIVES=cors_allowed_origins *\npublish_allowed_origins *
    ports:
      - "3000:80"
  sse-client:
    image: nginx
    volumes:
      - ./:/usr/share/nginx/html
    ports:
      - "8090:80"
volumes:
  database-data: # named volumes can be managed easier using docker-compose